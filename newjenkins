pipeline{
    agent any
    tools {
      maven 'mymaven'
    }
    environment {
      DOCKER_TAG = 2.0
    }
    stages{
        stage('SCM'){
            steps{
                git credentialsId: 'github', 
                    url: 'https://github.com/nalapatt/dockeransiblejenkins'
            }
        }
        
        stage('Maven Build'){
            steps{
                sh "mvn clean package"
            }
        }
        
        stage('Docker Build'){
            steps{
                sshagent(['tomcat-ssh']) {
                     sh "docker build . -t nalapatt123/hariapp:${DOCKER_TAG} "
                     sh "scp -o StrictHostKeyChecking=no target/dockeransible.war tomcat@172.31.17.213:/home/tomcat/tomcat/webapps/dockeransible.war"
                }
            }
        }
        
        stage('DockerHub Push'){
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
                    sh "docker login -u nalapatt123 -p ${dockerHubPwd}"
                }
                
                sh "docker push nalapatt123/hariapp:${DOCKER_TAG} "
            }
        }
     
        stage('Docker Deploy'){
            steps{
                sshagent(['dev-slave']) {
                     //sh 'ssh -o StrictHostKeyChecking=no deploy@172.31.17.213 "docker stop my-app && docker rm --force my-app"'
                     sh 'ssh -o StrictHostKeyChecking=no deploy@172.31.17.213 "docker run -p 8080:8090 -d --name my-app nalapatt123/hariapp:${DOCKER_TAG}"'
                }
            }
        }
        
    }
}

        
        in the Post build actions add
        
        
        stage('Remove Unused docker image') {
            steps{
                  sh "docker rmi nalapatt123/hariapp:${DOCKER_TAG}"
                 }
         }
        stage('docker stop container and remove container') {
             steps{
                   sh 'docker ps -f name=my-app -q | xargs --no-run-if-empty docker container stop'
                   sh 'docker container ls -a -fname=my-app -q | xargs -r docker container rm'
                  }
        }

